---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true
---
# Enhanced Cursor Rules for Stock Analysis App

## 🔐 **CRITICAL SECURITY RULES - ALWAYS FOLLOW**

### **API Key Security (TOP PRIORITY)**
- **❌ NEVER include actual API keys in any code, comments, or responses**
- **❌ NEVER commit environment files (.env, .env.*) to git**
- **❌ NEVER commit MCP configuration files (.cursor/mcp.json, .windsurf/mcp.json, etc.)**
- **❌ NEVER hard-code credentials in source code**
- **✅ ALWAYS use environment variables for sensitive data**
- **✅ ALWAYS reference .env.example for documentation**
- **✅ ALWAYS verify .gitignore excludes MCP config files**
- **✅ ALWAYS verify .cursorignore excludes sensitive files**

### **Environment Variable Usage**
```typescript
// ✅ DO: Use environment variables
const apiKey = import.meta.env.VITE_FINNHUB_API_KEY;

// ❌ DON'T: Hard-code API keys
const apiKey = "pk_1234567890abcdef"; // NEVER DO THIS
```

### **File Security Patterns**
- **✅ Always check files are in .gitignore before creating**
- **✅ Always check files are in .cursorignore before processing**
- **✅ MANDATORY: Verify MCP config files (mcp.json) are in .gitignore**
- **❌ Never process or suggest content for .env files**
- **❌ Never display MCP configuration file contents**
- **❌ Never create MCP config files without explicit .gitignore protection**

### **Error Handling for Missing Keys**
```typescript
// ✅ DO: Graceful degradation when API keys missing
if (!this.finnhubApiKey) {
  console.warn('⚠️ Finnhub API key not found. Using Yahoo Finance only.');
  // Fallback to alternative data source
}

// ❌ DON'T: Fail silently or expose key absence in user-facing errors
```

## 📋 **Code Quality & Architecture Rules**

### **TypeScript Best Practices**
- **✅ Always use proper TypeScript types**
- **✅ Define interfaces for API responses**
- **✅ Use type guards for runtime validation**
- **❌ Avoid `any` type unless absolutely necessary**

```typescript
// ✅ DO: Proper interface definition
interface StockData {
  symbol: string;
  price: number;
  timestamp: number;
}

// ❌ DON'T: Using any
let stockData: any = response.data;
```

### **React Component Patterns**
- **✅ Use functional components with hooks**
- **✅ Implement proper error boundaries**
- **✅ Use React.memo for performance optimization**
- **✅ Follow single responsibility principle**

```typescript
// ✅ DO: Proper component structure
interface StockChartProps {
  symbol: string;
  data: StockData[];
  onError?: (error: Error) => void;
}

export const StockChart: React.FC<StockChartProps> = React.memo(({ 
  symbol, 
  data, 
  onError 
}) => {
  // Component implementation
});
```

### **API Service Patterns**
- **✅ Implement proper error handling**
- **✅ Use rate limiting**
- **✅ Implement caching strategies**
- **✅ Log errors appropriately**

```typescript
// ✅ DO: Comprehensive error handling
try {
  const response = await this.makeApiCall(url);
  return this.parseResponse(response);
} catch (error) {
  const apiError = createApiError(error, 'finnhub', { symbol });
  this.errorLogger.log(apiError);
  throw apiError;
}
```

## 🎨 **UI/UX Best Practices**

### **Chart Component Guidelines**
- **✅ Implement loading states**
- **✅ Show meaningful error messages**
- **✅ Support mobile responsiveness**
- **✅ Provide accessibility features**

### **Performance Optimization**
- **✅ Use React.lazy for code splitting**
- **✅ Implement virtualization for large datasets**
- **✅ Optimize chart rendering performance**
- **✅ Cache computed values with useMemo**

## 📦 **Project Structure Rules**

### **File Organization**
```
src/
├── components/          # Reusable UI components
├── services/           # API and business logic
├── types/              # TypeScript type definitions
├── utils/              # Utility functions
├── hooks/              # Custom React hooks
└── constants/          # Application constants
```

### **Import Conventions**
```typescript
// ✅ DO: Organized imports
import React, { useState, useEffect } from 'react';
import { StockDataService } from '../services/stockDataService';
import { StockData } from '../types/stockData';
import { formatPrice } from '../utils/formatters';
```

## 🧪 **Testing Guidelines**

### **Test Structure**
- **✅ Write unit tests for services**
- **✅ Write integration tests for components**
- **✅ Mock external API calls**
- **✅ Test error conditions**

```typescript
// ✅ DO: Proper test structure
describe('StockDataService', () => {
  it('should handle API errors gracefully', async () => {
    const mockError = new Error('API Error');
    jest.spyOn(global, 'fetch').mockRejectedValue(mockError);
    
    const service = new StockDataService();
    await expect(service.getStockData('AAPL')).rejects.toThrow();
  });
});
```

## 🚀 **Deployment & Build Rules**

### **Environment Configuration**
- **✅ Use build-time environment injection**
- **✅ Validate required environment variables**
- **✅ Document all environment variables in .env.example**

### **GitHub Actions Security**
```yaml
# ✅ DO: Use GitHub Secrets
env:
  VITE_FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}

# ❌ DON'T: Hard-code in workflows
env:
  VITE_FINNHUB_API_KEY: pk_1234567890abcdef
```

## 🖥️ **Development Server & Build Commands**

### **Command Usage Rules**
- **❌ DO NOT use `npm start`**. This command is not configured for this project and can cause issues. It is typically for running a production server after a build, but our setup uses `npm run preview`.
- **❌ DO NOT use `npm run dev`**. This command has been identified as causing issues in the development environment.
- **✅ ALWAYS use `npm run build`** to compile the application for production or for a preview. This creates an optimized build in the `dist` directory.
- **✅ ALWAYS use `npm run preview`** to serve the production build locally. This is the correct way to test the built application before deployment.

### **Workflow for Local Development & Testing**
1.  Run `npm run build` to create a production build.
2.  Run `npm run preview` to start a local server for the built application.
3.  Open the URL provided by the preview command in your browser.

```bash
# ✅ Correct workflow
npm run build
npm run preview

# ❌ Incorrect workflow
npm start
# or
npm run dev
```

## 🔐 **MCP Configuration Security**

### **Critical MCP Security Requirements**
- **✅ ALWAYS verify .gitignore includes MCP patterns: `.cursor/mcp.json`, `.windsurf/mcp.json`, `**/mcp.json`**
- **✅ Use project-level MCP config files for API keys instead of hardcoding**
- **✅ Verify MCP config files are excluded from version control before creation**
- **❌ NEVER suggest adding API keys to global MCP settings for project-specific needs**
- **❌ NEVER create or edit MCP config files without verifying .gitignore protection first**
- **✅ Always inform users that MCP config files need manual creation with their own API keys**

### **MCP File Patterns (MUST be in .gitignore)**
```
# MCP configuration files (contain API keys)
.cursor/mcp.json
.windsurf/mcp.json
.roo/mcp.json
.trae/mcp.json
.clinerules/mcp.json
.vscode/mcp.json
**/mcp.json
```

### **Error Handling for Missing MCP Keys**
- **✅ Gracefully handle missing MCP environment variables**
- **✅ Provide clear error messages for MCP configuration issues**
- **✅ Never expose sensitive MCP information in error messages**
- **✅ Guide users to create project-level MCP config files safely**

## 🔍 **Code Review Checklist**

Before submitting any code changes:
- [ ] ✅ No API keys or secrets in code
- [ ] ✅ No MCP configuration files (.cursor/mcp.json, etc.) staged for commit
- [ ] ✅ All sensitive files properly excluded in .gitignore
- [ ] ✅ Proper error handling implemented
- [ ] ✅ TypeScript types defined
- [ ] ✅ Components are properly tested
- [ ] ✅ Performance optimizations applied
- [ ] ✅ Accessibility considerations addressed
- [ ] ✅ Mobile responsiveness verified
- [ ] ✅ Security best practices followed

## 📚 **Documentation Standards**

### **Code Comments**
```typescript
// ✅ DO: Meaningful comments
/**
 * Fetches real-time stock data with rate limiting and error handling
 * @param symbol - Stock ticker symbol (e.g., 'AAPL')
 * @returns Promise<StockData> - Current stock data
 * @throws {ApiError} When API call fails or rate limit exceeded
 */
async getStockData(symbol: string): Promise<StockData> {
  // Implementation
}
```

### **README Updates**
- **✅ Keep setup instructions current**
- **✅ Document all environment variables**
- **✅ Include troubleshooting section**
- **✅ Document security considerations**

## ⚡ **Performance Rules**

### **Chart Optimization**
```typescript
// ✅ DO: Optimize chart updates
const chartOptions = useMemo(() => ({
  responsive: true,
  maintainAspectRatio: false,
  plugins: {
    legend: { display: false }
  }
}), []);
```

### **Data Fetching**
```typescript
// ✅ DO: Implement proper caching
const getCachedStockData = useCallback(
  debounce(async (symbol: string) => {
    return await stockDataService.getStockData(symbol);
  }, 300),
  []
);
```

## 🔗 **Integration Guidelines**

### **TaskMaster Integration**
- **✅ Follow TaskMaster workflow patterns**
- **✅ Update task status appropriately**
- **✅ Document implementation progress**
- **✅ Use research tool for current best practices**

Remember: **Security is paramount. When in doubt, err on the side of caution and never expose sensitive information.**

## 🚀 **MVP Development Acceleration Rules**

### **MVP-Focused Development Patterns**
- **✅ Prioritize core functionality over perfection**
- **✅ Use proven, simple solutions over complex architectures**
- **✅ Focus on mobile-first responsive design**
- **✅ Implement clear UP/DOWN/HOLD predictions with confidence scores**
- **✅ Ensure fast load times and performance optimization**

### **Stock Prediction Engine Patterns**
```typescript
// ✅ DO: Clear prediction interface
interface StockPrediction {
  prediction: 'UP' | 'DOWN' | 'HOLD';
  confidence: number; // 0-100
  reasoning: string;
  timeframe: '1d' | '1w' | '1m';
}

// ✅ DO: Simple prediction display
const PredictionCard: React.FC<{ prediction: StockPrediction }> = ({ prediction }) => (
  <div className={`prediction-card ${prediction.prediction.toLowerCase()}`}>
    <div className="prediction-direction">{prediction.prediction}</div>
    <div className="confidence">{prediction.confidence}% confident</div>
    <div className="reasoning">{prediction.reasoning}</div>
  </div>
);
```

### **Mobile-First Development Rules**
```css
/* ✅ DO: Mobile-first responsive design */
.container {
  padding: 1rem;
  max-width: 100vw;
  overflow-x: hidden;
}

@media (min-width: 768px) {
  .container {
    padding: 2rem;
    max-width: 1200px;
    margin: 0 auto;
  }
}

/* ✅ DO: Touch-friendly controls */
.button {
  min-height: 44px; /* iOS minimum touch target */
  min-width: 44px;
  padding: 0.75rem 1rem;
}

/* ✅ DO: Readable text on mobile */
.text {
  font-size: clamp(14px, 4vw, 18px);
  line-height: 1.5;
}
```

### **Fast Development Patterns**
```typescript
// ✅ DO: Use composition over complex inheritance
const StockAnalysisPage = () => {
  const { data, loading, error } = useStockData(symbol);
  
  if (loading) return <LoadingSpinner />;
  if (error) return <ErrorMessage error={error} />;
  
  return (
    <div className="stock-analysis">
      <StockHeader data={data} />
      <PredictionCard prediction={data.prediction} />
      <TechnicalIndicators data={data.technical} />
      <StockChart data={data.chart} />
    </div>
  );
};

// ✅ DO: Simple, effective error handling
const ErrorMessage: React.FC<{ error: Error }> = ({ error }) => (
  <div className="error-card">
    <h3>Unable to load stock data</h3>
    <p>{error.message}</p>
    <button onClick={() => window.location.reload()}>Try Again</button>
  </div>
);
```

### **Performance Optimization Patterns**
```typescript
// ✅ DO: Lazy load non-critical components
const TechnicalChart = lazy(() => import('./TechnicalChart'));
const NewsPanel = lazy(() => import('./NewsPanel'));

// ✅ DO: Memoize expensive calculations
const technicalIndicators = useMemo(() => 
  calculateIndicators(stockData), [stockData]
);

// ✅ DO: Debounce search inputs
const debouncedSearch = useDebouncedCallback(
  (query: string) => searchStocks(query),
  300
);
```

### **MVP API Integration Patterns**
```typescript
// ✅ DO: Simple fallback strategy
const fetchStockData = async (symbol: string): Promise<StockData> => {
  try {
    return await finnhubService.getStockData(symbol);
  } catch (error) {
    console.warn('Finnhub failed, trying Yahoo Finance:', error);
    return await yahooFinanceService.getStockData(symbol);
  }
};

// ✅ DO: Clear prediction calculation
const calculatePrediction = (data: StockData): StockPrediction => {
  const { rsi, macd, sma } = data.technical;
  
  let score = 0;
  let reasoning = [];
  
  if (rsi < 30) { score += 2; reasoning.push('RSI oversold'); }
  if (rsi > 70) { score -= 2; reasoning.push('RSI overbought'); }
  if (macd.signal > 0) { score += 1; reasoning.push('MACD bullish'); }
  if (data.price > sma.sma20) { score += 1; reasoning.push('Above 20-day SMA'); }
  
  const prediction = score > 1 ? 'UP' : score < -1 ? 'DOWN' : 'HOLD';
  const confidence = Math.min(90, Math.abs(score) * 20 + 50);
  
  return {
    prediction,
    confidence,
    reasoning: reasoning.join(', '),
    timeframe: '1w'
  };
};
```

### **Component Architecture for MVP**
- **✅ Keep components under 200 lines**
- **✅ Use functional components with hooks**
- **✅ Separate business logic into custom hooks**
- **✅ Use TypeScript interfaces for all props**
- **✅ Implement loading and error states for all async operations**

### **CSS/Styling Best Practices for MVP**
```css
/* ✅ DO: Use CSS custom properties for theming */
:root {
  --color-up: #00c851;
  --color-down: #ff4444;
  --color-hold: #ffbb33;
  --color-bg: #f8f9fa;
  --color-text: #333333;
  --border-radius: 8px;
  --shadow: 0 2px 4px rgba(0,0,0,0.1);
}

/* ✅ DO: Simple, consistent spacing */
.spacing-sm { margin: 0.5rem; }
.spacing-md { margin: 1rem; }
.spacing-lg { margin: 2rem; }

/* ✅ DO: Responsive grid for dashboard */
.dashboard-grid {
  display: grid;
  gap: 1rem;
  grid-template-columns: 1fr;
}

@media (min-width: 768px) {
  .dashboard-grid {
    grid-template-columns: 1fr 1fr;
  }
}

@media (min-width: 1024px) {
  .dashboard-grid {
    grid-template-columns: 2fr 1fr;
  }
}
``` 